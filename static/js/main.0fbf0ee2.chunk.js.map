{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js","images/sun_cloudy_icon.png"],"names":["Title","className","src","i1","alt","id","Form","props","onSubmit","getAllWeathData","type","name","placeholder","value","defaultChecked","htmlFor","Weather","this","error","city","country","descr","temp","unit","humidex","React","Component","App","state","undefined","e","a","async","preventDefault","countryQ","target","elements","Country","cityQ","City","unitQ","Unit","fetch","json","countryCode","console","log","status","countryCheck","length","alpha2Code","invalidLocation","weathData","cod","setState","main","humidity","weather","description","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.0fbf0ee2.chunk.js","sourcesContent":["import React from 'react';\r\nimport i1 from '../images/sun_cloudy_icon.png';\r\n// import i2 from '../images/TO_waterfront.jpg';\r\n\r\nconst Title = ()=>(\r\n    <div>\r\n        <h1 className = \"title-container__title\">Weather App</h1>\r\n        <div className = \"iconDiv\">\r\n             <img src={i1} alt=\"Weather Icon\" className = \"icon\" id=\"i1\"></img>\r\n             {/* <img src ={i2} alt = \"Weather Icon\" className = \"icon\" id=\"i2\"></img> */}\r\n        </div>       \r\n    </div>\r\n);\r\n\r\nexport default Title; ","import React from 'react';\r\n\r\nconst Form = (props) =>(\r\n    <div>\r\n        Search a Destination\r\n        <form onSubmit={props.getAllWeathData}>\r\n            <input type=\"text\" name=\"Country\" placeholder=\"Country\"></input>\r\n            <input type=\"text\" name=\"City\" placeholder=\"City\"></input>\r\n            <label className=\"unitLabel\">\r\n                <input type=\"radio\" id=\"metricUnit\" name=\"Unit\" value=\"metric\" defaultChecked></input>\r\n                <label htmlFor=\"metricUnit\" className=\"Unit\">Metric </label>\r\n                <input type=\"radio\" id=\"imperialUnit\" name= \"Unit\" value=\"imperial\"></input>\r\n                <label htmlFor=\"imperialUnit\" className=\"Unit\">Imperial </label>\r\n                {/* <span></span> */}\r\n            </label>\r\n            <br></br>\r\n            <button type=\"submit\">Search</button>\r\n        </form>\r\n    </div>\r\n);\r\n\r\nexport default Form; ","import React from 'react';\r\n\r\nclass Weather extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className = \"weather__info\">\r\n                {this.props.error && <p className = \"weather__key\">{this.props.error}</p>}\r\n                {this.props.city &&<h2 className = \"weather__key\">{this.props.city}, {this.props.country}</h2>}\r\n                {this.props.city &&<h1 className = \"weather__key\">Weather: <span>{this.props.descr}</span></h1>}\r\n                \r\n                {this.props.temp &&<p className = \"weather__key\">Temperature <span>{this.props.temp} &deg;{this.props.unit}</span>\r\n                    {/* <br></br>\r\n                    <span>{this.props.descr}</span> */}\r\n                </p>}\r\n                {this.props.humidex && <p className = \"weather__key\">Humidex <span>{this.props.humidex}</span></p>}                                         \r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Weather;","import React from 'react';\nimport './App.css';\nimport Title from \"./components/Title\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\n\nclass App extends React.Component{\n\n  state = {\n    country: undefined,\n    city: undefined,\n    temp: undefined,\n    humidex: undefined,\n    descr: undefined,\n    error: undefined,\n    unit: undefined\n  }\n\n  invalidLocation(){\n\n    this.setState({\n      country: undefined,\n      city: undefined,\n      temp: undefined,\n      humidex: undefined,\n      descr: undefined,\n      error: \"Location not recognised. Please re-enter in location details.\",\n      unit: undefined\n\n    })\n\n  }\n\n  getAllWeathData = async(e) =>{\n    e.preventDefault();\n    var countryQ = e.target.elements.Country.value;\n    const cityQ = e.target.elements.City.value;\n    var unitQ=e.target.elements.Unit.value;\n\n    //first check they are filled in form\n    if(cityQ && countryQ){\n\n      //england/uk not recognised by api\n      //could hard code\n\n      //check if valid country code\n      var countryCode = await (await fetch (`https://restcountries.eu/rest/v2/alpha/${countryQ}`)).json();\n      console.log(countryCode);\n        \n      if(countryCode.status === 404 || countryCode.status === 400){\n        //not recognised, check if valid country name\n        const countryCheck = await (await fetch(`https://restcountries.eu/rest/v2/name/${countryQ}`)).json();\n        console.log(countryCheck);\n\n        if(countryCheck.length === 1 && countryCheck.status !== 404 ){\n          //api will produce suggestions based on name input, therefore check for single result, and check result\n          //valid country name, switch to code\n          //&& countryCheck[0].name === countryQ\n            countryQ = countryCheck[0].alpha2Code;          \n\n        }else{\n          //not valid country name or code, send error message and do not pull info\n          this.invalidLocation();\n          return;\n        }\n      }else{\n        //valid code but ensure alpha2 vs alpha3 iso code\n        countryQ = countryCode.alpha2Code;\n      }\n      \n\n      const weathData = await (await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${cityQ},${countryQ}&units=${unitQ}&APPID=cd95e8d91daaa698e0bf339b6aa6b508`)).json();\n      console.log(weathData); \n      if(weathData.cod ===\"404\"){\n        this.invalidLocation();        \n      }else{\n        //user preference for units\n        if (unitQ === \"metric\"){\n          unitQ=\"C\";\n        }\n        else{ unitQ=\"F\";}\n\n        //api call will still return if city is valid even if country code is invalid\n        //could check to see if user queried country is the same as produced result\n\n        this.setState({\n          country: countryQ,\n          city: cityQ,\n          temp: weathData.main.temp,\n          humidex: weathData.main.humidity,\n          descr: weathData.weather[0].description,\n          error: undefined,\n          unit: unitQ\n        })\n      }      \n    }else{\n      this.setState({\n        country: undefined,\n        city: undefined,\n        temp: undefined,\n        humidex: undefined,\n        descr: undefined,\n        error: \"Please Enter in Location Details\",\n        unit: undefined\n      })\n    }\n    \n  }\n\n  render(){\n    return(\n      //single parent element in JSX\n      <div>\n      <div className = \"main\">\n        <div className = \"title-container\"><Title/></div>\n        <div className =\"form-container\">\n          <Form getAllWeathData={this.getAllWeathData}/>\n          <Weather \n            country={this.state.country}\n            city={this.state.city}\n            temp={this.state.temp}\n            humidex={this.state.humidex}\n            descr={this.state.descr}\n            error={this.state.error}\n            unit= {this.state.unit}/>\n        </div>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/sun_cloudy_icon.f6e2b508.png\";"],"sourceRoot":""}